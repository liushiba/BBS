-- MySQL dump 10.13  Distrib 5.7.22, for Linux (x86_64)
--
-- Host: localhost    Database: tequila
-- ------------------------------------------------------
-- Server version	5.7.22-0ubuntu0.17.10.1

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `t_answer`
--

DROP TABLE IF EXISTS `t_answer`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_answer` (
  `aid` int(6) unsigned NOT NULL AUTO_INCREMENT,
  `status` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `content` varchar(10240) NOT NULL,
  `has_read` tinyint(1) NOT NULL DEFAULT '0',
  `qid` int(6) unsigned NOT NULL,
  `uid` int(6) unsigned NOT NULL,
  PRIMARY KEY (`aid`),
  UNIQUE KEY `aid` (`aid`,`qid`),
  KEY `fk_answer_question_qid` (`qid`),
  KEY `fk_answer_user_uid` (`uid`),
  KEY `idx_answer` (`content`(8)),
  KEY `idx_answer_has_read` (`has_read`),
  CONSTRAINT `fk_answer_question_qid` FOREIGN KEY (`qid`) REFERENCES `t_question` (`qid`) ON DELETE CASCADE ON UPDATE CASCADE,
  CONSTRAINT `fk_answer_user_uid` FOREIGN KEY (`uid`) REFERENCES `t_user` (`uid`)
) ENGINE=InnoDB AUTO_INCREMENT=100019 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_answer`
--

LOCK TABLES `t_answer` WRITE;
/*!40000 ALTER TABLE `t_answer` DISABLE KEYS */;
INSERT INTO `t_answer` VALUES (100000,1,'2018-05-24 03:31:54','2018-05-24 03:53:07','<p>嘎嘎，原来貌似只要给类加上stream_request_body装饰器，data_received就是异步的了，只管在data_received里面进行写文件就好了<br></p><p>==================old================</p><p>实在没办法，nginx的upload_module在高版本编不过去，网上又找不到可用的py库，我就这样了</p><p>ʕ⊙ᴥ⊙ʔ  </p><p>至少是没堵着。。。</p><pre><code><span class=\"kn\">from</span> <span class=\"nn\">tornado.web</span> <span class=\"k\">import</span> <span class=\"n\">RequestHandler</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tornado</span> <span class=\"k\">import</span> <span class=\"n\">gen</span>\n<span class=\"kn\">from</span> <span class=\"nn\">tornado.web</span> <span class=\"k\">import</span> <span class=\"n\">stream_request_body</span>\n<span class=\"kn\">import</span> <span class=\"nn\">time</span>\n<span class=\"kn\">import</span> <span class=\"nn\">random</span>\n\n\n<span class=\"nd\">@stream_request_body</span>\n<span class=\"k\">class</span> <span class=\"nc\">A</span><span class=\"p\">(</span><span class=\"n\">RequestHandler</span><span class=\"p\">):</span>\n    <span class=\"k\">def</span> <span class=\"nf\">initialize</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fp</span> <span class=\"o\">=</span> <span class=\"nb\">open</span><span class=\"p\">(</span><span class=\"s1\">\'xxxx.tmp\'</span><span class=\"p\">,</span><span class=\"s1\">\'wb\'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">=</span> <span class=\"mi\">0</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span> <span class=\"o\">=</span> <span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">randint</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">,</span><span class=\"mi\">100</span><span class=\"p\">)</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">post</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">set_header</span><span class=\"p\">(</span><span class=\"s1\">\'Content-Type\'</span><span class=\"p\">,</span> <span class=\"s1\">\'application/json;charset=utf-8\'</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">finish</span><span class=\"p\">(</span><span class=\"s1\">\'{\"msg\":\"ok\"}\'</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">gen</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">close</span><span class=\"p\">()</span>\n\n    <span class=\"k\">async</span> <span class=\"k\">def</span> <span class=\"nf\">data_received</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">chunk</span><span class=\"p\">):</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">+=</span> <span class=\"nb\">len</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span>\n        <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">time</span><span class=\"o\">.</span><span class=\"n\">time</span><span class=\"p\">(),</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">id</span><span class=\"p\">,</span> <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>\n        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">fp</span><span class=\"o\">.</span><span class=\"n\">write</span><span class=\"p\">(</span><span class=\"n\">chunk</span><span class=\"p\">)</span>\n        <span class=\"k\">await</span> <span class=\"n\">gen</span><span class=\"o\">.</span><span class=\"n\">sleep</span><span class=\"p\">(</span><span class=\"mi\">0</span><span class=\"p\">)</span></code></pre><h1><br></h1>',1,100000,100001),(100001,1,'2018-05-24 03:34:56','2018-05-24 03:53:10','<p>这个系统用tornado搭建本身就选择错误。原因如下：</p><p>1. 对于读取上传文件，tornado的官网上有说过，对于文件上传，tornado是直接全部读到内存中，再进行处理，也就是说，文件越大，文件越多，你的资源占用就越多。官网推荐用 nginx 的upload  module 来处理</p><p>2. 写文件这个操作，如果你用的是机械磁盘，本身就是同步的。因为只有一个磁头，每次的寻址都是同步的。所以，tornado的写文件操作无法异步。</p><p>如果一定用tornado，需要这么做：</p><p>1. 整个系统用nginx+tornado [+另外的server]</p><p>2. 对于文件上传，采用nginx upload module，nginx负责文件的上传，tornado只负责进行文件的cp和mv</p><p>3. 如果你的文件上传后有后续复杂的io操作。比方说：读取文件里面的内容，找出之前的某个相关文件，并且合并，再重新写入。那么需要一个另外的server，专门负责这个。</p><p>4. 对于第3点，如果你采用非机械磁盘，应该就没有必要了。</p>',1,100000,100002),(100002,0,'2018-05-24 03:35:52','2018-05-24 03:35:52','<p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">如果仅仅是上传文件，相关的逻辑很少，使用nginx+module处理就很好</span></p><p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">如果上传文件还有较多的逻辑处理，nodejs的非阻塞io也非常好用。</span></p><p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">如果一定要用torado，那么加锁的开销其实不大，每秒进行lock十万次应该是没问题的</span></p>',1,100000,100003),(100003,0,'2018-05-24 03:36:30','2018-05-24 03:36:30','<p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">Tornado 真是io伤不起啊, 一旦阻塞整个服务都block..</span></p><p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">所以耗时的任务采用异步httpclient交给后端server处理..或采用专业的MQ解决你说的锁问题</span></p>',1,100000,100004),(100004,0,'2018-05-24 03:39:20','2018-05-24 03:39:20','<p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">self.request.remote_ip 这样就可以了，楼主试试。<img alt=\"tornado.png\" src=\"http://127.0.0.1:8000/pics/20180524/100cb5a1-46e1-43ce-822d-5de26460e55atornado.png\" width=\"286\" height=\"72\"></span><br></p>',1,100001,100001),(100005,0,'2018-05-24 03:40:09','2018-05-24 03:40:09','<p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">当你是直接访问一个tornado instance的时候，通过self.request.remote_ip就可以访问到client IP;&nbsp;</span></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">当你是通过反向代理来访问的时候，你的HTTPServer构造参数需要加一个xheaders=True&nbsp;</span></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">http_server = HTTPServer(Application(), xheaders=True) , 这样你就可以通过self.request.remote_ip来获得期望的IP&nbsp;</span></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">可以参考下tornado源码，希望对你有帮助 :)&nbsp;</span></p>',1,100001,100002),(100006,0,'2018-05-24 03:40:53','2018-05-24 03:40:53','<p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">补充：如果应用像 Hello World 中的示例一样没用到 HTTPServer，&nbsp;</span></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\"></span></p><p><code><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">if __name__ == \"__main__\":&nbsp;</span></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">application.listen(8888)&nbsp;</span></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">tornado.ioloop.IOLoop.instance().start()&nbsp;</span></p></code></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\"></span></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">那么可以把 xheaders=True 传入 application.listen 里，该 method 的代码是：&nbsp;</span></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\"></span></p><p><code><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">def listen(self, port, address=\"\", **kwargs):&nbsp;</span></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">from tornado.httpserver import HTTPServer&nbsp;</span></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">server = HTTPServer(self, **kwargs)&nbsp;</span></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">server.listen(port, address)</span></p></code></p>',1,100001,100000),(100007,1,'2018-05-24 03:42:59','2018-05-24 03:52:39','<p>楼主的问题描述的不是很清楚啊，请问你遇到了什么问题？</p>',1,100002,100003),(100008,0,'2018-05-24 03:47:29','2018-05-24 03:47:29','<p>C#中的事件其实就是一个特殊的多播委托。比如写一段代码：<br></p><pre><code><span class=\"k\">class</span> <span class=\"nc\">Program</span>\n<span class=\"p\">{</span>\n	<span class=\"k\">public</span> <span class=\"k\">delegate</span> <span class=\"k\">void</span> <span class=\"nf\">SendHandler</span><span class=\"p\">(</span><span class=\"kt\">string</span> <span class=\"n\">str</span><span class=\"p\">);</span>\n	<span class=\"k\">public</span> <span class=\"k\">event</span> <span class=\"n\">SendHandler</span> <span class=\"n\">SendEvent</span><span class=\"p\">;</span>\n	<span class=\"k\">static</span> <span class=\"k\">void</span> <span class=\"nf\">Main</span><span class=\"p\">(</span><span class=\"kt\">string</span><span class=\"p\">[]</span> <span class=\"n\">args</span><span class=\"p\">)</span>\n	<span class=\"p\">{</span> <span class=\"p\">}</span>\n<span class=\"p\">}</span>\n</code></pre><p>编译后我们用ILDASM.EXE打开那个exe看看就会发现其实SendHandler委托被编译为了一个叫做SendHandler的类，</p><p><br></p><p><img alt=\"啊啊啊.jpg\" src=\"http://127.0.0.1:8000/pics/20180524/45da56c1-5077-47cc-8beb-328d5b61ecbf啊啊啊.jpg\" width=\"338\" height=\"215\"><br></p><p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\"></span></p><p>SendEvent事件则是被编译成了包含一个add_前缀和一个remove_前缀的的<b>代码段</b>（倒三角）。<br></p><pre><code><span class=\"o\">.</span><span class=\"k\">event</span> <span class=\"n\">Program</span><span class=\"o\">/</span><span class=\"n\">SendHandler</span> <span class=\"n\">SendEvent</span>\n<span class=\"o\">{</span>\n  <span class=\"o\">.</span><span class=\"n\">addon</span> <span class=\"n\">instance</span> <span class=\"k\">void</span> <span class=\"n\">Program</span><span class=\"o\">::</span><span class=\"n\">add_SendEvent</span><span class=\"o\">(</span><span class=\"k\">class</span> <span class=\"n\">Program</span><span class=\"o\">/</span><span class=\"n\">SendHandler</span><span class=\"o\">)</span>\n  <span class=\"o\">.</span><span class=\"n\">removeon</span> <span class=\"n\">instance</span> <span class=\"k\">void</span> <span class=\"n\">Program</span><span class=\"o\">::</span><span class=\"n\">remove_SendEvent</span><span class=\"o\">(</span><span class=\"k\">class</span> <span class=\"n\">Program</span><span class=\"o\">/</span><span class=\"n\">SendHandler</span><span class=\"o\">)</span>\n<span class=\"o\">}</span> <span class=\"c1\">// end of event Program::SendEvent</span>\n</code></pre><p>add_前缀的方法其实是通过调用Delegate.Combine()方法来实现的，组成了一个多播委托。remove_就是调用Delegate.Remove()方法，用于移除多播委托中的某个委托。</p><p>好了，前面的都不是废话，你还会看到有一个SendEvent的<b>字段</b>（蔚蓝色菱形）</p><pre><code><span class=\"p\">.</span><span class=\"n\">field</span> <span class=\"k\">private</span> <span class=\"k\">class</span> <span class=\"nc\">Program</span><span class=\"p\">/</span><span class=\"n\">SendHandler</span> <span class=\"n\">SendEvent</span>\n</code></pre><p>说事件是一个特殊的多播委托，那么事件比较特殊的地方在于这里，事件具有一个私有的委托类型的字段，其存储了对事件处理方法的引用。而add_前缀方法和remove_前缀方法起到的就是类似C#属性访问器中get_和set_方法的作用，使用事件访问私有委托。</p><p><b>简而言之，事件就是用来访问私有的委托字段，让应用程序的代码更加的安全。</b></p>',1,100003,100003),(100009,1,'2018-05-24 03:50:14','2018-05-24 03:52:27','<p>首先，你可以关注下C# 4里引入的协变逆变，这样可能引入一个IBase&lt;T&gt;就可以干活。</p><p>其次，Handle&lt;T&gt;(Base&lt;T&gt;[] itemList) 也是一个常见的签名。</p>',1,100004,100002),(100010,1,'2018-05-24 03:50:49','2018-05-24 03:52:30','<p>Base&lt;string&gt;和Base&lt;int&gt;可以认为是两个毫不相干的类型。</p><p>如果一定要产生联系，需要加入一个公共基类像这样：</p><pre><code>Base&lt;T&gt; : Base\n</code></pre><p>那么这时候，Base&lt;string&gt;和Base&lt;int&gt;就有了共同的基类Base了。</p><p>当然，C# 4加入了泛型接口的协变和逆变，不过这和你的泛型类型没啥关系。</p>',1,100004,100004),(100011,0,'2018-05-24 03:52:02','2018-05-24 03:52:02','<p>StringChild 赋值给 Base&lt;String&gt;是完全没问题的，因为是继承关系。</p><p>但是 Base&lt;String&gt; 并不能赋值给 Base&lt;Object&gt;，尽管 String 是 Object 子类。这个刚开始的时候可能有点想不通，举个简单的例子：楼主(String)比我(Object)小，并不能推出楼主的父亲(Base&lt;String&gt;)就比我父亲(Base&lt;Object&gt;)小。</p><p>楼主可以看一下Eric Lippert 关于Covariance and Contravariance的这个系列 <a href=\"https://link.zhihu.com/?target=http%3A//blogs.msdn.com/b/ericlippert/archive/tags/covariance%2Band%2Bcontravariance/\" target=\"_blank\">http://blogs.msdn.com/b/ericlippert/archive/tags/covariance+and+contravariance/</a>，相信会有帮助的。</p>',1,100004,100003),(100012,1,'2018-05-24 05:28:03','2018-05-24 05:31:13','<p>Docker的思想来自于集装箱，集装箱解决了什么问题？在一艘大船上，可以把货物规整的摆放起来。并且各种各样的货物被集装箱标准化了，集装箱和集装箱之间不会互相影响。那么我就不需要专门运送水果的船和专门运送化学品的船了。只要这些货物在集装箱里封装的好好的，那我就可以用一艘大船把他们都运走。<br></p><p>docker就是类似的理念。现在都流行云计算了，云计算就好比大货轮。docker就是集装箱。</p><ol><li>不同的应用程序可能会有不同的应用环境，比如.net开发的网站和php开发的网站依赖的软件就不一样，如果把他们依赖的软件都安装在一个服务器上就要调试很久，而且很麻烦，还会造成一些冲突。比如IIS和Apache访问端口冲突。这个时候你就要隔离.net开发的网站和php开发的网站。常规来讲，我们可以在服务器上创建不同的虚拟机在不同的虚拟机上放置不同的应用，但是虚拟机开销比较高。docker可以实现虚拟机隔离应用环境的功能，并且开销比虚拟机小，小就意味着省钱了。</li><li>你开发软件的时候用的是Ubuntu，但是运维管理的都是centos，运维在把你的软件从开发环境转移到生产环境的时候就会遇到一些Ubuntu转centos的问题，比如：有个特殊版本的数据库，只有Ubuntu支持，centos不支持，在转移的过程当中运维就得想办法解决这样的问题。这时候要是有docker你就可以把开发环境直接封装转移给运维，运维直接部署你给他的docker就可以了。而且部署速度快。</li><li>在服务器负载方面，如果你单独开一个虚拟机，那么虚拟机会占用空闲内存的，docker部署的话，这些内存就会利用起来。</li></ol><p>总之docker就是集装箱原理。</p>',1,100006,100002),(100013,1,'2018-05-24 05:32:57','2018-05-24 05:37:34','<p><code>card</code>&nbsp;是个列表对象，<code>self.inserted = inserted</code>&nbsp;这使得&nbsp;<code>inserted</code>&nbsp;和&nbsp;<code>card</code>&nbsp;都是指向同一个列表对象的。此时，操作&nbsp;<code>inserted</code>&nbsp;就是操作&nbsp;<code>card</code>&nbsp;。</p><p>如果要分开，可以另外生成一个列表&nbsp;<code>self.inserted = list(inserted)</code>。</p>',1,100007,100001),(100014,1,'2018-05-24 05:36:55','2018-05-24 05:37:31','<p style=\"text-align: justify;\">简单的看下三种情况：</p><pre><code><span class=\"hljs-function\" style=\"outline: 0px; word-break: break-all;\"><span class=\"hljs-keyword\" style=\"outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">def</span> <span class=\"hljs-title\" style=\"outline: 0px; color: rgb(0, 153, 0); word-break: break-all;\">changeList</span><span class=\"hljs-params\" style=\"outline: 0px; color: rgb(79, 79, 79); word-break: break-all;\">(l)</span>:</span>\n    l[<span class=\"hljs-number\" style=\"outline: 0px; color: rgb(0, 102, 102); word-break: break-all;\">0</span>] = <span class=\"hljs-number\" style=\"outline: 0px; color: rgb(0, 102, 102); word-break: break-all;\">5</span> \n\n<span class=\"hljs-function\" style=\"outline: 0px; word-break: break-all;\"><span class=\"hljs-keyword\" style=\"outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">def</span> <span class=\"hljs-title\" style=\"outline: 0px; color: rgb(0, 153, 0); word-break: break-all;\">changeList1</span><span class=\"hljs-params\" style=\"outline: 0px; color: rgb(79, 79, 79); word-break: break-all;\">(l)</span>:</span>\n    l = []\n\n<span class=\"hljs-function\" style=\"outline: 0px; word-break: break-all;\"><span class=\"hljs-keyword\" style=\"outline: 0px; color: rgb(0, 0, 136); word-break: break-all;\">def</span> <span class=\"hljs-title\" style=\"outline: 0px; color: rgb(0, 153, 0); word-break: break-all;\">changeList2</span><span class=\"hljs-params\" style=\"outline: 0px; color: rgb(79, 79, 79); word-break: break-all;\">(l)</span>:</span>\n    l[:] = []\n\n\na = [<span class=\"hljs-number\" style=\"outline: 0px; color: rgb(0, 102, 102); word-break: break-all;\">1</span>,<span class=\"hljs-number\" style=\"outline: 0px; color: rgb(0, 102, 102); word-break: break-all;\">2</span>,<span class=\"hljs-number\" style=\"outline: 0px; color: rgb(0, 102, 102); word-break: break-all;\">3</span>]\nchangeList(a)\nprint(a)\nb = [<span class=\"hljs-number\" style=\"outline: 0px; color: rgb(0, 102, 102); word-break: break-all;\">1</span>,<span class=\"hljs-number\" style=\"outline: 0px; color: rgb(0, 102, 102); word-break: break-all;\">2</span>,<span class=\"hljs-number\" style=\"outline: 0px; color: rgb(0, 102, 102); word-break: break-all;\">3</span>]\nchangeList1(b)\nprint(b)\nc = [<span class=\"hljs-number\" style=\"outline: 0px; color: rgb(0, 102, 102); word-break: break-all;\">1</span>,<span class=\"hljs-number\" style=\"outline: 0px; color: rgb(0, 102, 102); word-break: break-all;\">2</span>,<span class=\"hljs-number\" style=\"outline: 0px; color: rgb(0, 102, 102); word-break: break-all;\">3</span>]\nchangeList2(c)\nprint(c)<ul class=\"pre-numbering\" style=\"margin: 15px 0px 0px; list-style: none; padding: 8px 0px; line-height: 1.6; outline: 0px; word-break: break-all; position: absolute; width: 48px; background-color: rgb(238, 240, 244); top: 0px; left: 0px; text-align: right;\"><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">1</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">2</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">3</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">4</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">5</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">6</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">7</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">8</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">9</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">10</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">11</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">12</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">13</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">14</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">15</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">16</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">17</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">18</li><li style=\"list-style: none; outline: 0px; padding: 0px 8px; margin: 0px; word-break: break-all; color: rgb(153, 153, 153);\">19</li></ul></code></pre><p style=\"text-align: justify;\">输出结果：</p><blockquote><p style=\"text-align: justify;\">[5, 2, 3]&nbsp;<br>[1, 2, 3]&nbsp;<br>[]</p></blockquote><p style=\"text-align: justify;\">第一种情况，因为列表是mutable，所以可以改变。第二种情况只是在changeList1函数中新创建个[]对象，然后命名l。要想在函数中对列表有实际作用，得像changeList2那样。</p>',1,100007,100001),(100015,1,'2018-05-24 06:25:19','2018-05-24 06:28:15','<p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">Redis的问题可以参考一下这个答案，从知乎上面找的！</span><br></p><p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\"><img alt=\"image.png\" src=\"http://127.0.0.1:8000/pics/20180524/e10a614b-dbec-4492-a7f9-9dba6e4142ceimage.png\" width=\"703\" height=\"289\"><br></span></p>',1,100008,100001),(100016,0,'2018-05-24 06:36:29','2018-05-24 06:36:29','<p><span style=\"font-size: 14px;\">int[] a1= new int[3];//定义数组a1有3个元素</span></p><p><span style=\"font-size: 14px;\">int[</span><span style=\"font-size: 14px;\">] a2 = new int[2] { 1, 2 };//定义数组a2有两个元素为1和2；</span></p><p><span style=\"font-size: 14px;\">a1 = a2; //将a2赋给a1</span></p><p><span style=\"font-size: 14px;\">a1[3] = 5;// 为什么会报错？ 索引超出了数组界限。</span></p><p><span style=\"font-size: 14px;\">我定义的数组A1长度为3,是不是a1=a2后a1的长度就为2了？</span></p>',1,100009,100001),(100017,0,'2018-05-24 06:37:09','2018-05-24 06:37:09','<pre><code>如果我需要把a2的值赋给a1（我需要用a2的值），同时还需要在a1【3】中继续赋值，该怎么写呢？</code></pre>',1,100009,100010),(100018,0,'2018-05-24 06:37:59','2018-05-24 06:37:59','<pre><code>刚没注意看，a1的长度只有3，所以无论你怎么弄a1[3]是肯定会越界的，应该是a1[2]这里或许是你写错了，当然改成a1[2]后还是会越界，解决办法是将a1=a2改成a2.CopyTo(a1,0);</code></pre>',1,100009,100001);
/*!40000 ALTER TABLE `t_answer` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_group`
--

DROP TABLE IF EXISTS `t_group`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_group` (
  `group_type` int(1) NOT NULL DEFAULT '0',
  `group_name` varchar(12) NOT NULL,
  `description` varchar(40) DEFAULT NULL,
  UNIQUE KEY `group_type` (`group_type`,`group_name`),
  KEY `idx_group` (`group_name`(4))
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_group`
--

LOCK TABLES `t_group` WRITE;
/*!40000 ALTER TABLE `t_group` DISABLE KEYS */;
INSERT INTO `t_group` VALUES (0,'user','normal user'),(1,'admin','admin user'),(2,'superuser','super admin user');
/*!40000 ALTER TABLE `t_group` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_question`
--

DROP TABLE IF EXISTS `t_question`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_question` (
  `qid` int(6) unsigned NOT NULL AUTO_INCREMENT,
  `status` tinyint(1) NOT NULL DEFAULT '0',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `abstract` varchar(40) NOT NULL,
  `content` varchar(10240) NOT NULL,
  `view_count` int(11) NOT NULL DEFAULT '0',
  `answer_count` int(11) NOT NULL DEFAULT '0',
  `adopted_count` int(1) NOT NULL DEFAULT '0',
  `uid` int(6) unsigned NOT NULL,
  `tid` int(6) unsigned NOT NULL,
  PRIMARY KEY (`qid`),
  UNIQUE KEY `qid` (`qid`,`uid`,`tid`),
  KEY `fk_question_user_uid` (`uid`),
  KEY `fk_question_tag_tid` (`tid`),
  KEY `idx_question` (`abstract`(8),`content`(8)),
  CONSTRAINT `fk_question_tag_tid` FOREIGN KEY (`tid`) REFERENCES `t_tag` (`tid`),
  CONSTRAINT `fk_question_user_uid` FOREIGN KEY (`uid`) REFERENCES `t_user` (`uid`)
) ENGINE=InnoDB AUTO_INCREMENT=100010 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_question`
--

LOCK TABLES `t_question` WRITE;
/*!40000 ALTER TABLE `t_question` DISABLE KEYS */;
INSERT INTO `t_question` VALUES (100000,1,'2018-05-24 03:27:24','2018-05-24 06:33:42','Tornado 异步读写文件的方法？','<p><b>大家好，</b><br></p><p>我现在正在使用Tornado开发一个文件上传应用。当通过Tornado主线程异步获取到用户上传的文件数据后，我需要把数据写入到文件系统中。</p><p>1. 如果为每个文件的写操作单独开一个线程/进程，由于可能同时写很多文件，大量的线程/进程对服务器会是很大的开销，而且Tornado也不建议乱开线程/进程；</p><p>2. 如果把所有待写入的数据放到队列中，然后用一个线程周期性地从队列中获取数据并写入到文件系统中，则会涉及到对队列的加锁问题。而锁的引入势必又会拖慢Tornado的速度（因为Tornado必须获取锁后才能把数据写到队列中）。</p><p>3. 一个更理想的做法是采用类似Tornado读写socket的epoll模型，这样既可以不开线程/进程，又不会阻塞，但普通文件的读写又不支持epoll（即不能设置为non-block）。</p><p>所以想请问大家，像这种异步读写文件的问题一般是怎么解决的呢？<span style=\"color: rgb(227, 55, 55);\">谢谢</span>！</p>',3,4,2,100000,100000),(100001,0,'2018-05-24 03:38:17','2018-05-24 03:40:53','Tornado2.3获取IP错误！什么原因？','<p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">最近将框架升级到2.3，发现获取请求的IP地址出现错误！&nbsp;</span></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">我在Request中读取self.remote_ip，不管是正常访问还是代理方式的访问，其结果都是127.0.0.1，而我直接获取self.request.headers[\'X-Real-Ip\']，结果却正是我想要的。&nbsp;</span></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">不知道是不是自己设置options时出错，还是自己nginx代理出错？&nbsp;</span></p><p><span style=\"color: rgb(17, 17, 17); font-size: 14px;\">莫非是bug？</span></p><p><img alt=\"tornado.png\" src=\"http://127.0.0.1:8000/pics/20180524/2d78f262-bbbb-4995-b07a-40180638a35dtornado.png\" width=\"286\" height=\"72\"><br></p>',2,3,0,100004,100000),(100002,1,'2018-05-24 03:42:13','2018-05-24 06:33:53','tornado HTML页面处理 问题','<p><span style=\"font-size: 14px;\">tornado HTML中报这样的错：</span></p><p><span style=\"font-size: 14px;\">File \"online/post_html.generated.py\", line 13, in _tt_execute</span></p><p><span style=\"font-size: 14px;\">_tt_tmp = gen_meid or \'手机串号为空\' # online/post.html:27 (via _base.html:15)</span></p><p><span style=\"font-size: 14px;\">NameError: global name \'gen_meid\' is not defined</span></p><p><span style=\"font-size: 14px;\">我如何在html中判断gen_meid这个参数传过来没有</span></p>',1,1,1,100001,100000),(100003,0,'2018-05-24 03:44:50','2018-05-24 03:47:29','c#中委托和事件？','<p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">总是感觉委托和事件没什么区别，调用事件不就是相当于调用多个委托么？</span><br></p>',1,1,0,100003,100001),(100004,1,'2018-05-24 03:49:42','2018-05-24 06:33:57','C# 泛型转换问题？','<p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">有这么个类：</span></p><pre><code><span class=\"k\" style=\"font-weight: 600;\">class</span> <span class=\"nc\" style=\"font-weight: 600; color: rgb(23, 81, 153);\">Base</span><span class=\"p\">&lt;</span><span class=\"n\">T</span><span class=\"p\">&gt;{}</span>\n</code></pre><p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">有若干个子类：</span></p><pre><code><span class=\"k\" style=\"font-weight: 600;\">class</span> <span class=\"nc\" style=\"font-weight: 600; color: rgb(23, 81, 153);\">StringChild</span> <span class=\"p\">:</span> <span class=\"n\">Base</span><span class=\"p\">&lt;</span><span class=\"n\">String</span><span class=\"p\">&gt;{}</span>\n<span class=\"k\" style=\"font-weight: 600;\">class</span> <span class=\"nc\" style=\"font-weight: 600; color: rgb(23, 81, 153);\">IntChild</span> <span class=\"p\">:</span> <span class=\"n\">Base</span><span class=\"p\">&lt;</span><span class=\"kt\" style=\"font-weight: 600; color: rgb(23, 81, 153);\">int</span><span class=\"p\">&gt;{}</span>\n<span class=\"p\">...</span>\n</code></pre><p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">然后有个处理类：</span></p><pre><code><span class=\"k\" style=\"font-weight: 600;\">class</span> <span class=\"nc\" style=\"font-weight: 600; color: rgb(23, 81, 153);\">Handler</span><span class=\"p\">{}</span>\n</code></pre><p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">这个处理类有个功能是处理一个由很多StringChild、IntChild等组成的数组：</span></p><pre><code><span class=\"k\" style=\"font-weight: 600;\">public</span> <span class=\"k\" style=\"font-weight: 600;\">void</span> <span class=\"nf\" style=\"font-weight: 600; color: rgb(241, 64, 60);\">handle</span><span class=\"p\">(</span><span class=\"n\">Base</span><span class=\"p\">&lt;</span><span class=\"kt\" style=\"font-weight: 600; color: rgb(23, 81, 153);\">object</span><span class=\"p\">&gt;[]</span> <span class=\"n\">itemList</span><span class=\"p\">)</span>\n</code></pre><p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">但是转换却报错：</span></p><pre><code>Base&lt;object&gt; base = (Base&lt;object&gt;)item[i];\n</code></pre><p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">为啥 StringChild 等的实例却无法转换为 Base&lt;object&gt;？那我应该怎么写才能符合我的要求？</span></p><p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">C#初学，打扰各位大神了。有空的麻烦帮我解答一下。</span></p>',4,3,2,100001,100001),(100005,0,'2018-05-24 05:24:55','2018-05-24 05:42:01','mysql日期类型默认值\'0000-00-00\' 报错','<p>如题，本来是 从另一个数据库中导出的sql文件，在我电脑上导入报这个错误，不知道是不是mysql 版本问题。多方搜索无果，所以上来求助。</p><pre><code><span class=\"hljs-keyword\" style=\"font-weight: bold;\">DROP</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">TABLE</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">IF</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">EXISTS</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`workreport_member`</span>;\n<span class=\"hljs-keyword\" style=\"font-weight: bold;\">CREATE</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">TABLE</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`workreport_member`</span> (\n  <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`uid`</span> <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">int</span>(<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">10</span>) <span class=\"hljs-keyword\" style=\"font-weight: bold;\">unsigned</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">NOT</span> <span class=\"hljs-literal\" style=\"color: rgb(0, 128, 128);\">NULL</span> AUTO_INCREMENT <span class=\"hljs-keyword\" style=\"font-weight: bold;\">COMMENT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'用户ID\'</span>,\n  <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`nickname`</span> <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">char</span>(<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">16</span>) <span class=\"hljs-keyword\" style=\"font-weight: bold;\">NOT</span> <span class=\"hljs-literal\" style=\"color: rgb(0, 128, 128);\">NULL</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">DEFAULT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'\'</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">COMMENT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'昵称\'</span>,\n  <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`sex`</span> tinyint(<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">3</span>) <span class=\"hljs-keyword\" style=\"font-weight: bold;\">unsigned</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">NOT</span> <span class=\"hljs-literal\" style=\"color: rgb(0, 128, 128);\">NULL</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">DEFAULT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'0\'</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">COMMENT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'性别\'</span>,\n  <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`birthday`</span> <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">date</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">NOT</span> <span class=\"hljs-literal\" style=\"color: rgb(0, 128, 128);\">NULL</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">DEFAULT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'0000-00-00\'</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">COMMENT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'生日\'</span>,\n  <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`qq`</span> <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">char</span>(<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">10</span>) <span class=\"hljs-keyword\" style=\"font-weight: bold;\">NOT</span> <span class=\"hljs-literal\" style=\"color: rgb(0, 128, 128);\">NULL</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">DEFAULT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'\'</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">COMMENT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'qq号\'</span>,\n  <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`score`</span> mediumint(<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">8</span>) <span class=\"hljs-keyword\" style=\"font-weight: bold;\">NOT</span> <span class=\"hljs-literal\" style=\"color: rgb(0, 128, 128);\">NULL</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">DEFAULT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'0\'</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">COMMENT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'用户积分\'</span>,\n  <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`login`</span> <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">int</span>(<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">10</span>) <span class=\"hljs-keyword\" style=\"font-weight: bold;\">unsigned</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">NOT</span> <span class=\"hljs-literal\" style=\"color: rgb(0, 128, 128);\">NULL</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">DEFAULT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'0\'</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">COMMENT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'登录次数\'</span>,\n  <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`reg_ip`</span> <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">bigint</span>(<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">20</span>) <span class=\"hljs-keyword\" style=\"font-weight: bold;\">NOT</span> <span class=\"hljs-literal\" style=\"color: rgb(0, 128, 128);\">NULL</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">DEFAULT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'0\'</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">COMMENT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'注册IP\'</span>,\n  <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`reg_time`</span> <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">int</span>(<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">10</span>) <span class=\"hljs-keyword\" style=\"font-weight: bold;\">unsigned</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">NOT</span> <span class=\"hljs-literal\" style=\"color: rgb(0, 128, 128);\">NULL</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">DEFAULT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'0\'</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">COMMENT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'注册时间\'</span>,\n  <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`last_login_ip`</span> <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">bigint</span>(<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">20</span>) <span class=\"hljs-keyword\" style=\"font-weight: bold;\">NOT</span> <span class=\"hljs-literal\" style=\"color: rgb(0, 128, 128);\">NULL</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">DEFAULT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'0\'</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">COMMENT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'最后登录IP\'</span>,\n  <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`last_login_time`</span> <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">int</span>(<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">10</span>) <span class=\"hljs-keyword\" style=\"font-weight: bold;\">unsigned</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">NOT</span> <span class=\"hljs-literal\" style=\"color: rgb(0, 128, 128);\">NULL</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">DEFAULT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'0\'</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">COMMENT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'最后登录时间\'</span>,\n  <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`status`</span> tinyint(<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">4</span>) <span class=\"hljs-keyword\" style=\"font-weight: bold;\">NOT</span> <span class=\"hljs-literal\" style=\"color: rgb(0, 128, 128);\">NULL</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">DEFAULT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'0\'</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">COMMENT</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'会员状态\'</span>,\n  PRIMARY <span class=\"hljs-keyword\" style=\"font-weight: bold;\">KEY</span> (<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`uid`</span>),\n  <span class=\"hljs-keyword\" style=\"font-weight: bold;\">KEY</span> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`status`</span> (<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`status`</span>)\n) <span class=\"hljs-keyword\" style=\"font-weight: bold;\">ENGINE</span>=MyISAM AUTO_INCREMENT=<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">3</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">DEFAULT</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">CHARSET</span>=utf8 <span class=\"hljs-keyword\" style=\"font-weight: bold;\">COMMENT</span>=<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'会员表\'</span>;\n</code></pre><hr><p>下面这是在Sequel Pro 导入时报的错误</p><p><img alt=\"图片描述\" src=\"https://segmentfault.com/img/bVKwD6?w=214&amp;h=54\"></p><p>不知道我说清楚了没……</p><hr><p>刚才又尝试了一下，我把值改成</p><pre><code> <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">`birthday`</span> <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">date</span> <span class=\"hljs-literal\" style=\"color: rgb(0, 128, 128);\">NOT</span> <span class=\"hljs-built_in\" style=\"color: rgb(0, 134, 179);\">NULL</span> DEFAULT <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'0001-01-01\'</span> COMMENT <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\'生日\'</span>,\n \n 貌似就可以了，有点迷惑，之前的sql 是从windows的navcat导出来的， 导入是在MAC 的Sequel Pro 导入的。</code></pre>',2,0,0,100000,100008),(100006,1,'2018-05-24 05:27:02','2018-05-24 06:34:00','如何通俗解释Docker是什么？','<p>现在<b>Docke</b>r的技术好像已经被广泛使用，但是小白还是不太明白<b>Docker</b>这种技术是用来做什么的？</p><p>能不能通俗的解释一下？</p>',3,1,1,100000,100002),(100007,1,'2018-05-24 05:32:13','2018-05-24 06:34:03','python实例传入参数为列表时出问题','<p>我创建了一个实例，实现了去除列表元素和返回列表的功能。而在导入参数（参数为列表）后，有一个不太相关的列表也发生同样的改变了，懵逼！</p><hr><p>版本：Python 2.7.14 (v2.7.14:84471935ed, Sep 16 2017, 20:25:58) [MSC v.1500 64 bit (AMD64)]</p><pre><code><span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"># -*- coding: utf-8 -*-</span>\nimport random\n\ncard = range(<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">1</span>, <span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">11</span>)*<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">4</span> + [<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"joker\"</span>] + [<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"J\"</span>]*<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">4</span> + [<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"Q\"</span>]*<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">4</span> + [<span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"K\"</span>]*<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">4</span>\n\n\n<span class=\"hljs-class\"><span class=\"hljs-keyword\" style=\"font-weight: bold;\">class</span> <span class=\"hljs-title\" style=\"color: rgb(68, 85, 136); font-weight: bold;\">AssignCard</span>(<span class=\"hljs-title\" style=\"color: rgb(68, 85, 136); font-weight: bold;\">object</span>):</span>\n\n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: bold;\">def</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: bold;\">__init__</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>, inserted)</span></span>:\n        <span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.inserted = inserted\n        <span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.assignfirst = []\n        <span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.assignsecond = []\n        \n    <span class=\"hljs-function\"><span class=\"hljs-keyword\" style=\"font-weight: bold;\">def</span> <span class=\"hljs-title\" style=\"color: rgb(153, 0, 0); font-weight: bold;\">assign</span><span class=\"hljs-params\">(<span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>)</span></span>:\n        random.shuffle(<span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.inserted)\n        print <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"begin self.inserted: \"</span>, <span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.inserted, <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"\\n\"</span>\n        \n        <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\">#  以下为去除列表元素的操作</span>\n        <span class=\"hljs-keyword\" style=\"font-weight: bold;\">while</span> <span class=\"hljs-symbol\" style=\"color: rgb(153, 0, 115);\">True:</span>\n            <span class=\"hljs-keyword\" style=\"font-weight: bold;\">if</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">not</span>(len(<span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.inserted) == <span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">0</span>):\n                <span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.assignfirst.append(<span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.inserted.pop())\n            <span class=\"hljs-symbol\" style=\"color: rgb(153, 0, 115);\">else:</span>\n                <span class=\"hljs-keyword\" style=\"font-weight: bold;\">break</span>\n                \n            print <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"card: \"</span>, card, <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"\\n\"</span>            <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\">#  一，此处作验证</span>\n            <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\"># print \"self.inserted: \", self.inserted, \"\\n\"</span>\n\n            <span class=\"hljs-keyword\" style=\"font-weight: bold;\">if</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">not</span>(len(<span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.inserted) == <span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">0</span>):\n                <span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.assignsecond.append(<span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.inserted.pop())\n            <span class=\"hljs-symbol\" style=\"color: rgb(153, 0, 115);\">else:</span>\n                <span class=\"hljs-keyword\" style=\"font-weight: bold;\">break</span>\n                    \n        <span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.assignedcard = [<span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.assignfirst, <span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.assignsecond]\n        <span class=\"hljs-keyword\" style=\"font-weight: bold;\">return</span> <span class=\"hljs-keyword\" style=\"font-weight: bold;\">self</span>.assignedcard\n        \n    \n<span class=\"hljs-keyword\" style=\"font-weight: bold;\">if</span> __name_<span class=\"hljs-number\" style=\"color: rgb(0, 128, 128);\">_</span> == <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"__main__\"</span>:\n    insertsome = card              <span class=\"hljs-comment\" style=\"color: rgb(153, 153, 136);\">#  二，只在这里使用过列表「card」</span>\n\n    assigncard = AssignCard(insertsome)\n    assigncard.assign()\n\n    print <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"end card: \"</span>, card, <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"\\n\"</span>    \n    print <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"end insretsome: \"</span>, insertsome, <span class=\"hljs-string\" style=\"color: rgb(221, 17, 68);\">\"\\n\"</span>    \n    </code></pre><p><strong>我的问题：</strong>代码中，我根本没有对列表「card」进行任何操作，只在（# 二）处赋值给变量「insertsome」，但在把「insertsome」传入到实例「assigncard」后，列表「card」与被其赋值的「insertsome」也发生了函数「assign」中同样操作：去除列表元素</p><p>这是为何呢，敬请指导！</p>',1,2,2,100000,100000),(100008,1,'2018-05-24 06:23:05','2018-05-24 06:28:15','关于redis的问题？','<p><span style=\"color: rgb(26, 26, 26); font-size: 15px;\">最近刚用redis有很多疑惑，我对它的理解是，首先它是一个键值对数据库,支持五中数据结构，它是保存数据在内存中，我不理解它为什么适合做缓存，举个例子，我们在Java的代码环境里面，那我们平时用的关系型数据库，比如说oracle,你想要保存或者获取数据库的数据，你要先连接jdbc,然后获得连接，再访问数据库系统，然后数据库系统再访问数据库服务器所在的磁盘io,把数据库服务器本地的磁盘的数据传到数据库服务器的内存中，再从数据库服务器的内存传到当前Java服务器的内存吗？那redis相比这个步骤，它的优势就是，直接把数据从Java（tomcat）服务器内存存到数据库服务器的内存中，略过了数据库服务器磁盘的存储，减少了一些io操作吗？并且还有一个问题，连接oralce,mysql是要用jdbc,那连接redis为什么只要实例化Jedis这个对象就可以了？</span><br></p>',1,1,1,100010,100007),(100009,0,'2018-05-24 06:36:05','2018-05-24 06:37:59','c#数组问题？','<p><span style=\"font-size: 14px;\">int[] a1= new int[3];//定义数组a1有3个元素</span></p><p><span style=\"font-size: 14px;\">int[</span><span style=\"font-size: 14px;\">] a2 = new int[2] { 1, 2 };//定义数组a2有两个元素为1和2；</span></p><p><span style=\"font-size: 14px;\">a1 = a2; //将a2赋给a1</span></p><p><span style=\"font-size: 14px;\">a1[3] = 5;// 为什么会报错？ 索引超出了数组界限。</span></p><p><span style=\"font-size: 14px;\">我定义的数组A1长度为3,是不是a1=a2后a1的长度就为2了？</span></p>',1,3,0,100010,100001);
/*!40000 ALTER TABLE `t_question` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_tag`
--

DROP TABLE IF EXISTS `t_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_tag` (
  `tid` int(6) unsigned NOT NULL AUTO_INCREMENT,
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `status` tinyint(1) NOT NULL DEFAULT '1',
  `tag_name` varchar(12) NOT NULL,
  PRIMARY KEY (`tid`),
  UNIQUE KEY `tid` (`tid`),
  KEY `idx_tag` (`tag_name`(2))
) ENGINE=InnoDB AUTO_INCREMENT=100018 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_tag`
--

LOCK TABLES `t_tag` WRITE;
/*!40000 ALTER TABLE `t_tag` DISABLE KEYS */;
INSERT INTO `t_tag` VALUES (100000,'2018-05-24 03:25:44','2018-05-24 03:25:44',1,'Python'),(100001,'2018-05-24 03:25:44','2018-05-24 03:25:44',1,'C#'),(100002,'2018-05-24 03:25:44','2018-05-24 03:25:44',1,'Docker'),(100003,'2018-05-24 05:06:54','2018-05-24 05:07:49',1,'Java'),(100004,'2018-05-24 05:10:48','2018-05-24 05:10:48',1,'Tornado'),(100005,'2018-05-24 05:10:48','2018-05-24 05:10:48',1,'Django'),(100006,'2018-05-24 05:10:48','2018-05-24 05:10:48',1,'ASP.NET'),(100007,'2018-05-24 05:10:48','2018-05-24 05:10:48',1,'Redis'),(100008,'2018-05-24 05:10:48','2018-05-24 05:10:48',1,'MySQL'),(100009,'2018-05-24 05:10:48','2018-05-24 05:10:48',1,'MongoDB'),(100010,'2018-05-24 05:10:48','2018-05-24 05:10:48',1,'Spring MVC'),(100011,'2018-05-24 05:10:48','2018-05-24 05:10:48',1,'Golang'),(100012,'2018-05-24 05:10:48','2018-05-24 05:10:48',1,'PHP'),(100013,'2018-05-24 05:10:48','2018-05-24 05:10:48',1,'Nginx'),(100014,'2018-05-24 05:10:48','2018-05-24 05:10:48',1,'Apache'),(100015,'2018-05-24 05:11:56','2018-05-24 05:11:56',1,'Flask'),(100016,'2018-05-24 05:11:56','2018-05-24 05:11:56',1,'Spider'),(100017,'2018-05-24 05:11:56','2018-05-24 05:11:56',1,'Linux');
/*!40000 ALTER TABLE `t_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `t_user`
--

DROP TABLE IF EXISTS `t_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `t_user` (
  `uid` int(6) unsigned NOT NULL AUTO_INCREMENT,
  `status` tinyint(1) NOT NULL DEFAULT '1',
  `created_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP,
  `updated_at` timestamp NOT NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP,
  `username` varchar(12) NOT NULL,
  `email` varchar(40) DEFAULT NULL,
  `phone` varchar(11) DEFAULT NULL,
  `password` varchar(40) NOT NULL,
  `point` int(4) DEFAULT '0',
  `sex` tinyint(1) DEFAULT '1',
  `address` varchar(60) DEFAULT NULL,
  `group_type` int(1) NOT NULL DEFAULT '0',
  PRIMARY KEY (`uid`),
  UNIQUE KEY `uid` (`uid`,`username`,`email`,`phone`),
  KEY `fk_user_group_group_type` (`group_type`),
  KEY `idx_user` (`username`(8),`email`(8),`phone`(8)),
  CONSTRAINT `fk_user_group_group_type` FOREIGN KEY (`group_type`) REFERENCES `t_group` (`group_type`)
) ENGINE=InnoDB AUTO_INCREMENT=100011 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `t_user`
--

LOCK TABLES `t_user` WRITE;
/*!40000 ALTER TABLE `t_user` DISABLE KEYS */;
INSERT INTO `t_user` VALUES (100000,1,'2018-05-24 03:25:44','2018-05-24 03:25:44','hugo','zhang8680@outlook.com',NULL,'18f3e922a1d1a9a140efbbe894bc829eeec260d8',0,1,NULL,2),(100001,1,'2018-05-24 03:27:53','2018-05-24 06:28:15','john',NULL,NULL,'18f3e922a1d1a9a140efbbe894bc829eeec260d8',4,1,NULL,0),(100002,1,'2018-05-24 03:33:49','2018-05-24 05:31:13','leslie',NULL,NULL,'18f3e922a1d1a9a140efbbe894bc829eeec260d8',3,1,NULL,0),(100003,1,'2018-05-24 03:35:31','2018-05-24 03:52:39','tornado',NULL,NULL,'18f3e922a1d1a9a140efbbe894bc829eeec260d8',1,1,NULL,0),(100004,1,'2018-05-24 03:36:24','2018-05-24 03:52:30','iloveyou',NULL,NULL,'18f3e922a1d1a9a140efbbe894bc829eeec260d8',1,1,NULL,0),(100005,1,'2018-05-24 05:38:06','2018-05-24 05:38:06','zhang',NULL,NULL,'18f3e922a1d1a9a140efbbe894bc829eeec260d8',0,1,NULL,0),(100006,1,'2018-05-24 05:38:40','2018-05-24 05:38:40','pythoner',NULL,NULL,'18f3e922a1d1a9a140efbbe894bc829eeec260d8',0,1,NULL,0),(100007,1,'2018-05-24 05:39:51','2018-05-24 05:39:51','zzz8680',NULL,NULL,'18f3e922a1d1a9a140efbbe894bc829eeec260d8',0,1,NULL,0),(100008,1,'2018-05-24 05:40:13','2018-05-24 05:40:13','4got10',NULL,NULL,'18f3e922a1d1a9a140efbbe894bc829eeec260d8',0,1,NULL,0),(100009,1,'2018-05-24 05:40:36','2018-05-24 05:40:36','tt066',NULL,NULL,'18f3e922a1d1a9a140efbbe894bc829eeec260d8',0,1,NULL,0),(100010,1,'2018-05-24 05:40:50','2018-05-24 05:40:50','xtop',NULL,NULL,'18f3e922a1d1a9a140efbbe894bc829eeec260d8',0,1,NULL,0);
/*!40000 ALTER TABLE `t_user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2018-05-24 14:39:17
